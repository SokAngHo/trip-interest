{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/js/index.js","webpack:///./public/js/modules/map.js","webpack:///./public/js/modules/RouteBoxer.js"],"names":["initMap","autocomplete","document","getElementById","map","directionsService","directionsRenderer","placesService","routeBoxer","routeBoxes","infoWindow","orig","value","dest","via","waypoints","google","maps","Map","center","lat","lng","zoom","DirectionsService","DirectionsRenderer","places","PlacesService","setMap","RouteBoxer","InfoWindow","drawRoutes","setTimeout","findPlaces","textInput","dropdown","Autocomplete","addListener","place","getPlace","addEventListener","e","keyCode","preventDefault","route","origin","destination","travelMode","res","status","setDirections","routes","legs","distance","window","alert","path","overview_path","box","console","log","i","length","request","bounds","keyword","nearbySearch","PlacesServiceStatus","OK","createPlaceMarker","image","url","scaledSize","Size","marker","Marker","icon","position","geometry","location","placeReq","placeId","place_id","event","getPlaceNameForMarker","close","addWaypoints","push","stopover","getDetails","content","name","setContent","open","drawBoxes","boxes","boxpolys","Array","Rectangle","fillOpacity","strokeOpacity","strokeColor","strokeWeight","R","prototype","range","grid_","latGrid_","lngGrid_","boxesX_","boxesY_","vertices","Polyline","getPath","getLength","getAt","getVertexCount","j","getVertex","buildGrid_","findIntersectingCells_","mergeIntersectingCells_","routeBounds","LatLngBounds","extend","routeBoundsCenter","getCenter","rhumbDestinationPoint","getNorthEast","getSouthWest","unshift","hintXY","getCellCoords_","markCell_","gridXY","getGridCoordsFromHint_","Math","abs","getGridIntersects_","latlng","x","y","hintlatlng","hint","start","end","startXY","endXY","edgePoint","edgeXY","brng","rhumbBearingTo","getGridIntersect_","fillInGridSquares_","gridLineLat","d","toRad","cos","startx","endx","cell","currentBox","getCellBounds_","mergeBoxesY_","mergeBoxesX_","LatLng","dist","parseFloat","lat1","lon1","lat2","dLat","dPhi","tan","PI","q","dLon","sin","lon2","isNaN","toDeg","atan2","toBrng","Number"],"mappings":"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","file":"App.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { initMap, autocomplete } from './modules/map';\r\n\r\ninitMap();\r\n\r\n// Setup places auto completion on origin and destination inputs.\r\nautocomplete(\r\n  document.getElementById('orig')\r\n  // document.getElementById('orig-id')\r\n);\r\nautocomplete(\r\n  document.getElementById('dest')\r\n  // document.getElementById('dest-id')\r\n);\r\n","import { RouteBoxer } from './RouteBoxer';\r\n\r\nlet map;\r\nlet directionsService;\r\nlet directionsRenderer;\r\nlet placesService;\r\nlet routeBoxer;\r\nlet routeBoxes = [];\r\nlet infoWindow;\r\nconst orig = document.getElementById('orig').value;\r\nconst dest = document.getElementById('dest').value;\r\nconst via = document.getElementById('via').value;\r\nlet waypoints = [];\r\n\r\nexport function initMap() {\r\n  // Initilise map to Melbourne location\r\n  map = new google.maps.Map(document.getElementById('map'), {\r\n    center: { lat: -37.8136, lng: 144.9631 },\r\n    zoom: 8,\r\n  });\r\n  directionsService = new google.maps.DirectionsService();\r\n  directionsRenderer = new google.maps.DirectionsRenderer();\r\n  placesService = new google.maps.places.PlacesService(map);\r\n  directionsRenderer.setMap(map);\r\n  routeBoxer = new RouteBoxer();\r\n  infoWindow = new google.maps.InfoWindow();\r\n\r\n  // Draw routes on the map\r\n  if (orig && dest) drawRoutes();\r\n  if (orig && dest && via) setTimeout(findPlaces, 1000);\r\n}\r\n\r\n// Google Map places auto completion on input\r\nexport function autocomplete(textInput) {\r\n  if (!textInput) return;\r\n\r\n  const dropdown = new google.maps.places.Autocomplete(textInput);\r\n  dropdown.addListener('place_changed', () => {\r\n    const place = dropdown.getPlace();\r\n    // placeIdInput.value = place.place_id;\r\n  });\r\n\r\n  textInput.addEventListener('keydown', (e) => {\r\n    if (e.keyCode === 13) e.preventDefault();\r\n  });\r\n}\r\n\r\nfunction drawRoutes() {\r\n  directionsService.route(\r\n    {\r\n      origin: orig,\r\n      destination: dest,\r\n      waypoints: waypoints,\r\n      travelMode: 'DRIVING',\r\n    },\r\n    function (res, status) {\r\n      if (status === 'OK') {\r\n        directionsRenderer.setDirections(res);\r\n        const route = res.routes[0];\r\n\r\n        // Don't box routes for route that is more than 300 km for budget purposes\r\n        if (route.legs[0].distance.value > 300000) {\r\n          window.alert(\r\n            \"Sorry, it's too expensive to get places along route that is more than 300 km.\"\r\n          );\r\n          return;\r\n        }\r\n\r\n        // Only box routes for main route\r\n        if (waypoints <= 0) {\r\n          const path = route.overview_path;\r\n          const distance = 0.5; // radius around route is 500 m\r\n          routeBoxes = routeBoxer.box(path, distance);\r\n          // drawBoxes(routeBoxes);\r\n        }\r\n      } else {\r\n        console.log(status);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nfunction findPlaces() {\r\n  if (!routeBoxes) return;\r\n\r\n  for (let i = 0; i < routeBoxes.length; i++) {\r\n    var request = {\r\n      bounds: routeBoxes[i],\r\n      keyword: via,\r\n    };\r\n\r\n    placesService.nearbySearch(request, function (res, status) {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n        console.log(res);\r\n        for (let i = 0; i < res.length; i++) {\r\n          createPlaceMarker(res[i]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction createPlaceMarker(place) {\r\n  const image = {\r\n    url: 'http://maps.google.com/mapfiles/kml/pushpin/blue-pushpin.png',\r\n    // size: new google.maps.Size(71, 71),\r\n    // anchor: new google.maps.Point(17, 34),\r\n    scaledSize: new google.maps.Size(15, 15),\r\n  };\r\n\r\n  const marker = new google.maps.Marker({\r\n    map: map,\r\n    icon: image,\r\n    position: place.geometry.location,\r\n  });\r\n\r\n  const placeReq = {\r\n    placeId: place.place_id,\r\n  };\r\n\r\n  google.maps.event.addListener(marker, 'mouseover', function () {\r\n    setTimeout(() => {\r\n      getPlaceNameForMarker(placeReq, marker);\r\n    }, 300);\r\n  });\r\n  google.maps.event.addListener(marker, 'mouseout', function () {\r\n    infoWindow.close();\r\n  });\r\n  google.maps.event.addListener(marker, 'click', function () {\r\n    addWaypoints(placeReq);\r\n  });\r\n}\r\n\r\nfunction addWaypoints(place) {\r\n  // Clear waypoints to make sure only 1 waypoint is selected\r\n  if (waypoints.length > 0) waypoints = [];\r\n\r\n  waypoints.push({ location: place, stopover: true });\r\n  drawRoutes();\r\n}\r\n\r\nfunction getPlaceNameForMarker(place, marker) {\r\n  placesService.getDetails(place, function (res, status) {\r\n    if (status === google.maps.places.PlacesServiceStatus.OK) {\r\n      const content = '<strong>' + res.name + '</strong>';\r\n      infoWindow.setContent(content);\r\n      infoWindow.open(map, marker);\r\n    }\r\n  });\r\n}\r\n\r\n// Utility function to draw route boxes for debugging\r\nfunction drawBoxes(boxes) {\r\n  var boxpolys = new Array(boxes.length);\r\n  for (var i = 0; i < boxes.length; i++) {\r\n    boxpolys[i] = new google.maps.Rectangle({\r\n      bounds: boxes[i],\r\n      fillOpacity: 0,\r\n      strokeOpacity: 1.0,\r\n      strokeColor: '#000000',\r\n      strokeWeight: 1,\r\n      map: map,\r\n    });\r\n  }\r\n}\r\n","/**\r\n * This file is retreived from\r\n * https://github.com/googlemaps/v3-utility-library/blob/master/archive/routeboxer/src/RouteBoxer.js\r\n *\r\n * @name RouteBoxer\r\n * @version 1.0\r\n * @copyright (c) 2010 Google Inc.\r\n * @author Thor Mitchell\r\n *\r\n * @fileoverview The RouteBoxer class takes a path, such as the Polyline for a\r\n * route generated by a Directions request, and generates a set of LatLngBounds\r\n * objects that are guaranteed to contain every point within a given distance\r\n * of that route. These LatLngBounds objects can then be used to generate\r\n * requests to spatial search services that support bounds filtering (such as\r\n * the Google Maps Data API) in order to implement search along a route.\r\n * <br/><br/>\r\n * RouteBoxer overlays a grid of the specified size on the route, identifies\r\n * every grid cell that the route passes through, and generates a set of bounds\r\n * that cover all of these cells, and their nearest neighbours. Consequently\r\n * the bounds returned will extend up to ~3x the specified distance from the\r\n * route in places.\r\n */\r\n\r\n/*\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Creates a new RouteBoxer\r\n *\r\n * @constructor\r\n */\r\nexport function RouteBoxer() {\r\n  this.R = 6371; // earth's mean radius in km\r\n}\r\n\r\n/**\r\n * Generates boxes for a given route and distance\r\n *\r\n * @param {google.maps.LatLng[] | google.maps.Polyline} path The path along\r\n *           which to create boxes. The path object can be either an Array of\r\n *           google.maps.LatLng objects or a Maps API v2 or Maps API v3\r\n *           google.maps.Polyline object.\r\n * @param {Number} range The distance in kms around the route that the generated\r\n *           boxes must cover.\r\n * @return {google.maps.LatLngBounds[]} An array of boxes that covers the whole\r\n *           path.\r\n */\r\nRouteBoxer.prototype.box = function (path, range) {\r\n  // Two dimensional array representing the cells in the grid overlaid on the path\r\n  this.grid_ = null;\r\n\r\n  // Array that holds the latitude coordinate of each vertical grid line\r\n  this.latGrid_ = [];\r\n\r\n  // Array that holds the longitude coordinate of each horizontal grid line\r\n  this.lngGrid_ = [];\r\n\r\n  // Array of bounds that cover the whole route formed by merging cells that\r\n  //  the route intersects first horizontally, and then vertically\r\n  this.boxesX_ = [];\r\n\r\n  // Array of bounds that cover the whole route formed by merging cells that\r\n  //  the route intersects first vertically, and then horizontally\r\n  this.boxesY_ = [];\r\n\r\n  // The array of LatLngs representing the vertices of the path\r\n  var vertices = null;\r\n\r\n  // If necessary convert the path into an array of LatLng objects\r\n  if (path instanceof Array) {\r\n    // already an arry of LatLngs (eg. v3 overview_path)\r\n    vertices = path;\r\n  } else if (path instanceof google.maps.Polyline) {\r\n    if (path.getPath) {\r\n      // v3 Maps API Polyline object\r\n      vertices = new Array(path.getPath().getLength());\r\n      for (var i = 0; i < vertices.length; i++) {\r\n        vertices[i] = path.getPath().getAt(i);\r\n      }\r\n    } else {\r\n      // v2 Maps API Polyline object\r\n      vertices = new Array(path.getVertexCount());\r\n      for (var j = 0; j < vertices.length; j++) {\r\n        vertices[j] = path.getVertex(j);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Build the grid that is overlaid on the route\r\n  this.buildGrid_(vertices, range);\r\n\r\n  // Identify the grid cells that the route intersects\r\n  this.findIntersectingCells_(vertices);\r\n\r\n  // Merge adjacent intersected grid cells (and their neighbours) into two sets\r\n  //  of bounds, both of which cover them completely\r\n  this.mergeIntersectingCells_();\r\n\r\n  // Return the set of merged bounds that has the fewest elements\r\n  return this.boxesX_.length <= this.boxesY_.length ? this.boxesX_ : this.boxesY_;\r\n};\r\n\r\n/**\r\n * Generates boxes for a given route and distance\r\n *\r\n * @param {LatLng[]} vertices The vertices of the path over which to lay the grid\r\n * @param {Number} range The spacing of the grid cells.\r\n */\r\nRouteBoxer.prototype.buildGrid_ = function (vertices, range) {\r\n  // Create a LatLngBounds object that contains the whole path\r\n  var routeBounds = new google.maps.LatLngBounds();\r\n  for (var i = 0; i < vertices.length; i++) {\r\n    routeBounds.extend(vertices[i]);\r\n  }\r\n\r\n  // Find the center of the bounding box of the path\r\n  var routeBoundsCenter = routeBounds.getCenter();\r\n\r\n  // Starting from the center define grid lines outwards vertically until they\r\n  //  extend beyond the edge of the bounding box by more than one cell\r\n  this.latGrid_.push(routeBoundsCenter.lat());\r\n\r\n  // Add lines from the center out to the north\r\n  this.latGrid_.push(routeBoundsCenter.rhumbDestinationPoint(0, range).lat());\r\n  for (i = 2; this.latGrid_[i - 2] < routeBounds.getNorthEast().lat(); i++) {\r\n    this.latGrid_.push(routeBoundsCenter.rhumbDestinationPoint(0, range * i).lat());\r\n  }\r\n\r\n  // Add lines from the center out to the south\r\n  for (i = 1; this.latGrid_[1] > routeBounds.getSouthWest().lat(); i++) {\r\n    this.latGrid_.unshift(routeBoundsCenter.rhumbDestinationPoint(180, range * i).lat());\r\n  }\r\n\r\n  // Starting from the center define grid lines outwards horizontally until they\r\n  //  extend beyond the edge of the bounding box by more than one cell\r\n  this.lngGrid_.push(routeBoundsCenter.lng());\r\n\r\n  // Add lines from the center out to the east\r\n  this.lngGrid_.push(routeBoundsCenter.rhumbDestinationPoint(90, range).lng());\r\n  for (i = 2; this.lngGrid_[i - 2] < routeBounds.getNorthEast().lng(); i++) {\r\n    this.lngGrid_.push(routeBoundsCenter.rhumbDestinationPoint(90, range * i).lng());\r\n  }\r\n\r\n  // Add lines from the center out to the west\r\n  for (i = 1; this.lngGrid_[1] > routeBounds.getSouthWest().lng(); i++) {\r\n    this.lngGrid_.unshift(routeBoundsCenter.rhumbDestinationPoint(270, range * i).lng());\r\n  }\r\n\r\n  // Create a two dimensional array representing this grid\r\n  this.grid_ = new Array(this.lngGrid_.length);\r\n  for (i = 0; i < this.grid_.length; i++) {\r\n    this.grid_[i] = new Array(this.latGrid_.length);\r\n  }\r\n};\r\n\r\n/**\r\n * Find all of the cells in the overlaid grid that the path intersects\r\n *\r\n * @param {LatLng[]} vertices The vertices of the path\r\n */\r\nRouteBoxer.prototype.findIntersectingCells_ = function (vertices) {\r\n  // Find the cell where the path begins\r\n  var hintXY = this.getCellCoords_(vertices[0]);\r\n\r\n  // Mark that cell and it's neighbours for inclusion in the boxes\r\n  this.markCell_(hintXY);\r\n\r\n  // Work through each vertex on the path identifying which grid cell it is in\r\n  for (var i = 1; i < vertices.length; i++) {\r\n    // Use the known cell of the previous vertex to help find the cell of this vertex\r\n    var gridXY = this.getGridCoordsFromHint_(vertices[i], vertices[i - 1], hintXY);\r\n\r\n    if (gridXY[0] === hintXY[0] && gridXY[1] === hintXY[1]) {\r\n      // This vertex is in the same cell as the previous vertex\r\n      // The cell will already have been marked for inclusion in the boxes\r\n      continue;\r\n    } else if (\r\n      (Math.abs(hintXY[0] - gridXY[0]) === 1 && hintXY[1] === gridXY[1]) ||\r\n      (hintXY[0] === gridXY[0] && Math.abs(hintXY[1] - gridXY[1]) === 1)\r\n    ) {\r\n      // This vertex is in a cell that shares an edge with the previous cell\r\n      // Mark this cell and it's neighbours for inclusion in the boxes\r\n      this.markCell_(gridXY);\r\n    } else {\r\n      // This vertex is in a cell that does not share an edge with the previous\r\n      //  cell. This means that the path passes through other cells between\r\n      //  this vertex and the previous vertex, and we must determine which cells\r\n      //  it passes through\r\n      this.getGridIntersects_(vertices[i - 1], vertices[i], hintXY, gridXY);\r\n    }\r\n\r\n    // Use this cell to find and compare with the next one\r\n    hintXY = gridXY;\r\n  }\r\n};\r\n\r\n/**\r\n * Find the cell a path vertex is in by brute force iteration over the grid\r\n *\r\n * @param {LatLng[]} latlng The latlng of the vertex\r\n * @return {Number[][]} The cell coordinates of this vertex in the grid\r\n */\r\nRouteBoxer.prototype.getCellCoords_ = function (latlng) {\r\n  for (var x = 0; this.lngGrid_[x] < latlng.lng(); x++) {}\r\n  for (var y = 0; this.latGrid_[y] < latlng.lat(); y++) {}\r\n  return [x - 1, y - 1];\r\n};\r\n\r\n/**\r\n * Find the cell a path vertex is in based on the known location of a nearby\r\n *  vertex. This saves searching the whole grid when working through vertices\r\n *  on the polyline that are likely to be in close proximity to each other.\r\n *\r\n * @param {LatLng[]} latlng The latlng of the vertex to locate in the grid\r\n * @param {LatLng[]} hintlatlng The latlng of the vertex with a known location\r\n * @param {Number[]} hint The cell containing the vertex with a known location\r\n * @return {Number[]} The cell coordinates of the vertex to locate in the grid\r\n */\r\nRouteBoxer.prototype.getGridCoordsFromHint_ = function (latlng, hintlatlng, hint) {\r\n  var x, y;\r\n  if (latlng.lng() > hintlatlng.lng()) {\r\n    for (x = hint[0]; this.lngGrid_[x + 1] < latlng.lng(); x++) {}\r\n  } else {\r\n    for (x = hint[0]; this.lngGrid_[x] > latlng.lng(); x--) {}\r\n  }\r\n\r\n  if (latlng.lat() > hintlatlng.lat()) {\r\n    for (y = hint[1]; this.latGrid_[y + 1] < latlng.lat(); y++) {}\r\n  } else {\r\n    for (y = hint[1]; this.latGrid_[y] > latlng.lat(); y--) {}\r\n  }\r\n\r\n  return [x, y];\r\n};\r\n\r\n/**\r\n * Identify the grid squares that a path segment between two vertices\r\n * intersects with by:\r\n * 1. Finding the bearing between the start and end of the segment\r\n * 2. Using the delta between the lat of the start and the lat of each\r\n *    latGrid boundary to find the distance to each latGrid boundary\r\n * 3. Finding the lng of the intersection of the line with each latGrid\r\n *     boundary using the distance to the intersection and bearing of the line\r\n * 4. Determining the x-coord on the grid of the point of intersection\r\n * 5. Filling in all squares between the x-coord of the previous intersection\r\n *     (or start) and the current one (or end) at the current y coordinate,\r\n *     which is known for the grid line being intersected\r\n *\r\n * @param {LatLng} start The latlng of the vertex at the start of the segment\r\n * @param {LatLng} end The latlng of the vertex at the end of the segment\r\n * @param {Number[]} startXY The cell containing the start vertex\r\n * @param {Number[]} endXY The cell containing the vend vertex\r\n */\r\nRouteBoxer.prototype.getGridIntersects_ = function (start, end, startXY, endXY) {\r\n  var edgePoint, edgeXY, i;\r\n  var brng = start.rhumbBearingTo(end); // Step 1.\r\n\r\n  var hint = start;\r\n  var hintXY = startXY;\r\n\r\n  // Handle a line segment that travels south first\r\n  if (end.lat() > start.lat()) {\r\n    // Iterate over the east to west grid lines between the start and end cells\r\n    for (i = startXY[1] + 1; i <= endXY[1]; i++) {\r\n      // Find the latlng of the point where the path segment intersects with\r\n      //  this grid line (Step 2 & 3)\r\n      edgePoint = this.getGridIntersect_(start, brng, this.latGrid_[i]);\r\n\r\n      // Find the cell containing this intersect point (Step 4)\r\n      edgeXY = this.getGridCoordsFromHint_(edgePoint, hint, hintXY);\r\n\r\n      // Mark every cell the path has crossed between this grid and the start,\r\n      //   or the previous east to west grid line it crossed (Step 5)\r\n      this.fillInGridSquares_(hintXY[0], edgeXY[0], i - 1);\r\n\r\n      // Use the point where it crossed this grid line as the reference for the\r\n      //  next iteration\r\n      hint = edgePoint;\r\n      hintXY = edgeXY;\r\n    }\r\n\r\n    // Mark every cell the path has crossed between the last east to west grid\r\n    //  line it crossed and the end (Step 5)\r\n    this.fillInGridSquares_(hintXY[0], endXY[0], i - 1);\r\n  } else {\r\n    // Iterate over the east to west grid lines between the start and end cells\r\n    for (i = startXY[1]; i > endXY[1]; i--) {\r\n      // Find the latlng of the point where the path segment intersects with\r\n      //  this grid line (Step 2 & 3)\r\n      edgePoint = this.getGridIntersect_(start, brng, this.latGrid_[i]);\r\n\r\n      // Find the cell containing this intersect point (Step 4)\r\n      edgeXY = this.getGridCoordsFromHint_(edgePoint, hint, hintXY);\r\n\r\n      // Mark every cell the path has crossed between this grid and the start,\r\n      //   or the previous east to west grid line it crossed (Step 5)\r\n      this.fillInGridSquares_(hintXY[0], edgeXY[0], i);\r\n\r\n      // Use the point where it crossed this grid line as the reference for the\r\n      //  next iteration\r\n      hint = edgePoint;\r\n      hintXY = edgeXY;\r\n    }\r\n\r\n    // Mark every cell the path has crossed between the last east to west grid\r\n    //  line it crossed and the end (Step 5)\r\n    this.fillInGridSquares_(hintXY[0], endXY[0], i);\r\n  }\r\n};\r\n\r\n/**\r\n * Find the latlng at which a path segment intersects with a given\r\n *   line of latitude\r\n *\r\n * @param {LatLng} start The vertex at the start of the path segment\r\n * @param {Number} brng The bearing of the line from start to end\r\n * @param {Number} gridLineLat The latitude of the grid line being intersected\r\n * @return {LatLng} The latlng of the point where the path segment intersects\r\n *                    the grid line\r\n */\r\nRouteBoxer.prototype.getGridIntersect_ = function (start, brng, gridLineLat) {\r\n  var d = this.R * ((gridLineLat.toRad() - start.lat().toRad()) / Math.cos(brng.toRad()));\r\n  return start.rhumbDestinationPoint(brng, d);\r\n};\r\n\r\n/**\r\n * Mark all cells in a given row of the grid that lie between two columns\r\n *   for inclusion in the boxes\r\n *\r\n * @param {Number} startx The first column to include\r\n * @param {Number} endx The last column to include\r\n * @param {Number} y The row of the cells to include\r\n */\r\nRouteBoxer.prototype.fillInGridSquares_ = function (startx, endx, y) {\r\n  var x;\r\n  if (startx < endx) {\r\n    for (x = startx; x <= endx; x++) {\r\n      this.markCell_([x, y]);\r\n    }\r\n  } else {\r\n    for (x = startx; x >= endx; x--) {\r\n      this.markCell_([x, y]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Mark a cell and the 8 immediate neighbours for inclusion in the boxes\r\n *\r\n * @param {Number[]} square The cell to mark\r\n */\r\nRouteBoxer.prototype.markCell_ = function (cell) {\r\n  var x = cell[0];\r\n  var y = cell[1];\r\n  this.grid_[x - 1][y - 1] = 1;\r\n  this.grid_[x][y - 1] = 1;\r\n  this.grid_[x + 1][y - 1] = 1;\r\n  this.grid_[x - 1][y] = 1;\r\n  this.grid_[x][y] = 1;\r\n  this.grid_[x + 1][y] = 1;\r\n  this.grid_[x - 1][y + 1] = 1;\r\n  this.grid_[x][y + 1] = 1;\r\n  this.grid_[x + 1][y + 1] = 1;\r\n};\r\n\r\n/**\r\n * Create two sets of bounding boxes, both of which cover all of the cells that\r\n *   have been marked for inclusion.\r\n *\r\n * The first set is created by combining adjacent cells in the same column into\r\n *   a set of vertical rectangular boxes, and then combining boxes of the same\r\n *   height that are adjacent horizontally.\r\n *\r\n * The second set is created by combining adjacent cells in the same row into\r\n *   a set of horizontal rectangular boxes, and then combining boxes of the same\r\n *   width that are adjacent vertically.\r\n *\r\n */\r\nRouteBoxer.prototype.mergeIntersectingCells_ = function () {\r\n  var x, y, box;\r\n\r\n  // The box we are currently expanding with new cells\r\n  var currentBox = null;\r\n\r\n  // Traverse the grid a row at a time\r\n  for (y = 0; y < this.grid_[0].length; y++) {\r\n    for (x = 0; x < this.grid_.length; x++) {\r\n      if (this.grid_[x][y]) {\r\n        // This cell is marked for inclusion. If the previous cell in this\r\n        //   row was also marked for inclusion, merge this cell into it's box.\r\n        // Otherwise start a new box.\r\n        box = this.getCellBounds_([x, y]);\r\n        if (currentBox) {\r\n          currentBox.extend(box.getNorthEast());\r\n        } else {\r\n          currentBox = box;\r\n        }\r\n      } else {\r\n        // This cell is not marked for inclusion. If the previous cell was\r\n        //  marked for inclusion, merge it's box with a box that spans the same\r\n        //  columns from the row below if possible.\r\n        this.mergeBoxesY_(currentBox);\r\n        currentBox = null;\r\n      }\r\n    }\r\n    // If the last cell was marked for inclusion, merge it's box with a matching\r\n    //  box from the row below if possible.\r\n    this.mergeBoxesY_(currentBox);\r\n    currentBox = null;\r\n  }\r\n\r\n  // Traverse the grid a column at a time\r\n  for (x = 0; x < this.grid_.length; x++) {\r\n    for (y = 0; y < this.grid_[0].length; y++) {\r\n      if (this.grid_[x][y]) {\r\n        // This cell is marked for inclusion. If the previous cell in this\r\n        //   column was also marked for inclusion, merge this cell into it's box.\r\n        // Otherwise start a new box.\r\n        if (currentBox) {\r\n          box = this.getCellBounds_([x, y]);\r\n          currentBox.extend(box.getNorthEast());\r\n        } else {\r\n          currentBox = this.getCellBounds_([x, y]);\r\n        }\r\n      } else {\r\n        // This cell is not marked for inclusion. If the previous cell was\r\n        //  marked for inclusion, merge it's box with a box that spans the same\r\n        //  rows from the column to the left if possible.\r\n        this.mergeBoxesX_(currentBox);\r\n        currentBox = null;\r\n      }\r\n    }\r\n    // If the last cell was marked for inclusion, merge it's box with a matching\r\n    //  box from the column to the left if possible.\r\n    this.mergeBoxesX_(currentBox);\r\n    currentBox = null;\r\n  }\r\n};\r\n\r\n/**\r\n * Search for an existing box in an adjacent row to the given box that spans the\r\n * same set of columns and if one is found merge the given box into it. If one\r\n * is not found, append this box to the list of existing boxes.\r\n *\r\n * @param {LatLngBounds}  The box to merge\r\n */\r\nRouteBoxer.prototype.mergeBoxesX_ = function (box) {\r\n  if (box !== null) {\r\n    for (var i = 0; i < this.boxesX_.length; i++) {\r\n      if (\r\n        this.boxesX_[i].getNorthEast().lng() === box.getSouthWest().lng() &&\r\n        this.boxesX_[i].getSouthWest().lat() === box.getSouthWest().lat() &&\r\n        this.boxesX_[i].getNorthEast().lat() === box.getNorthEast().lat()\r\n      ) {\r\n        this.boxesX_[i].extend(box.getNorthEast());\r\n        return;\r\n      }\r\n    }\r\n    this.boxesX_.push(box);\r\n  }\r\n};\r\n\r\n/**\r\n * Search for an existing box in an adjacent column to the given box that spans\r\n * the same set of rows and if one is found merge the given box into it. If one\r\n * is not found, append this box to the list of existing boxes.\r\n *\r\n * @param {LatLngBounds}  The box to merge\r\n */\r\nRouteBoxer.prototype.mergeBoxesY_ = function (box) {\r\n  if (box !== null) {\r\n    for (var i = 0; i < this.boxesY_.length; i++) {\r\n      if (\r\n        this.boxesY_[i].getNorthEast().lat() === box.getSouthWest().lat() &&\r\n        this.boxesY_[i].getSouthWest().lng() === box.getSouthWest().lng() &&\r\n        this.boxesY_[i].getNorthEast().lng() === box.getNorthEast().lng()\r\n      ) {\r\n        this.boxesY_[i].extend(box.getNorthEast());\r\n        return;\r\n      }\r\n    }\r\n    this.boxesY_.push(box);\r\n  }\r\n};\r\n\r\n/**\r\n * Obtain the LatLng of the origin of a cell on the grid\r\n *\r\n * @param {Number[]} cell The cell to lookup.\r\n * @return {LatLng} The latlng of the origin of the cell.\r\n */\r\nRouteBoxer.prototype.getCellBounds_ = function (cell) {\r\n  return new google.maps.LatLngBounds(\r\n    new google.maps.LatLng(this.latGrid_[cell[1]], this.lngGrid_[cell[0]]),\r\n    new google.maps.LatLng(this.latGrid_[cell[1] + 1], this.lngGrid_[cell[0] + 1])\r\n  );\r\n};\r\n\r\n/* Based on the Latitude/longitude spherical geodesy formulae & scripts\r\n   at http://www.movable-type.co.uk/scripts/latlong.html\r\n   (c) Chris Veness 2002-2010\r\n*/\r\ngoogle.maps.LatLng.prototype.rhumbDestinationPoint = function (brng, dist) {\r\n  var R = 6371; // earth's mean radius in km\r\n  var d = parseFloat(dist) / R; // d = angular distance covered on earth's surface\r\n  var lat1 = this.lat().toRad(),\r\n    lon1 = this.lng().toRad();\r\n  brng = brng.toRad();\r\n\r\n  var lat2 = lat1 + d * Math.cos(brng);\r\n  var dLat = lat2 - lat1;\r\n  var dPhi = Math.log(Math.tan(lat2 / 2 + Math.PI / 4) / Math.tan(lat1 / 2 + Math.PI / 4));\r\n  var q = Math.abs(dLat) > 1e-10 ? dLat / dPhi : Math.cos(lat1);\r\n  var dLon = (d * Math.sin(brng)) / q;\r\n  // check for going past the pole\r\n  if (Math.abs(lat2) > Math.PI / 2) {\r\n    lat2 = lat2 > 0 ? Math.PI - lat2 : -(Math.PI - lat2);\r\n  }\r\n  var lon2 = ((lon1 + dLon + Math.PI) % (2 * Math.PI)) - Math.PI;\r\n\r\n  if (isNaN(lat2) || isNaN(lon2)) {\r\n    return null;\r\n  }\r\n  return new google.maps.LatLng(lat2.toDeg(), lon2.toDeg());\r\n};\r\n\r\ngoogle.maps.LatLng.prototype.rhumbBearingTo = function (dest) {\r\n  var dLon = (dest.lng() - this.lng()).toRad();\r\n  var dPhi = Math.log(\r\n    Math.tan(dest.lat().toRad() / 2 + Math.PI / 4) / Math.tan(this.lat().toRad() / 2 + Math.PI / 4)\r\n  );\r\n  if (Math.abs(dLon) > Math.PI) {\r\n    dLon = dLon > 0 ? -(2 * Math.PI - dLon) : 2 * Math.PI + dLon;\r\n  }\r\n  return Math.atan2(dLon, dPhi).toBrng();\r\n};\r\n\r\n/**\r\n * Extend the Number object to convert degrees to radians\r\n *\r\n * @return {Number} Bearing in radians\r\n * @ignore\r\n */\r\nNumber.prototype.toRad = function () {\r\n  return (this * Math.PI) / 180;\r\n};\r\n\r\n/**\r\n * Extend the Number object to convert radians to degrees\r\n *\r\n * @return {Number} Bearing in degrees\r\n * @ignore\r\n */\r\nNumber.prototype.toDeg = function () {\r\n  return (this * 180) / Math.PI;\r\n};\r\n\r\n/**\r\n * Normalize a heading in degrees to between 0 and +360\r\n *\r\n * @return {Number} Return\r\n * @ignore\r\n */\r\nNumber.prototype.toBrng = function () {\r\n  return (this.toDeg() + 360) % 360;\r\n};\r\n"],"sourceRoot":""}